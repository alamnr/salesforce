<apex:page controller="gcAccountingPeriod" extensions="gcIncomeStatement" showHeader="true" sidebar="true">

<head>
<style>
.spinner {
    background: rgba(0,0,0,.2);
    background-image: url('/img/loading32.gif');
    background-repeat: no-repeat;
    background-attachment: fixed;	    
    background-position: center;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 9998;
}
.modal {
    background: rgba(0,0,0,.2);
    background-repeat: no-repeat;
    background-attachment: fixed;	    
    background-position: center;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 100;
}
tr.hoverBlue:hover td{background:#00EEFF !important;}
tr.total td {font-weight: bold}
td.total{font-weight: bold}
.link{
	cursor:pointer;
	text-decoration:underline;
}

tr.pq-grid-row:not(.total) td.pq-grid-cell.drillThru:hover
{
	cursor:pointer;
	text-decoration:underline;
	color: blue;
}
table{
	width:100%;
	border-collapse:collapse;
}
</style>

<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro,'/pqgrid.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro,'/pqgrid.min.js')}"/>

<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">
    $j = jQuery.noConflict();

    var spinner = +0;
    var period = {};
    var columnMode = 'quarter'; //alternative is 'period'
   // var periodYearStart = {};

    $j(document).ready(function()
    {
    	fn_initGrid_IncomeStatement();

    	period.Id = '{!$CurrentPage.parameters.idPeriod}';
    	if(period.Id)
    		fn_periodThis(period.Id);
    	else
    		fn_periodCurr();
    });
	function fn_refreshAll()
	{
		$j('#periodName').html(period.Name).attr('href','/'+period.Id);

		fn_refreshGrid_IncomeStatement();	
	}

	accounting.settings = {
		currency: {
			symbol : "$",   // default currency symbol is '$'
			format: "%s%v", // controls output: %s = symbol, %v = value/number (can be object: see below)
			decimal : ".",  // decimal point separator
			thousand: ",",  // thousands separator
			precision : 2   // decimal places
		},
		number: {
			precision : 2,  // default precision on numbers is 0
			thousand: ",",
			decimal : "."
		}
	}
	function fn_periodPrev()
	{
		fn_showSpinner();
		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodPrev}',
			period.Id,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodNext()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodNext}',
			period.Id,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodCurr()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodCurr}',
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodThis(idPeriod)
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodThis}',
			idPeriod,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_showSpinner()
	{
		spinner ++;
		if(spinner > 0)
		$j('#spinner').show();
	}
	function fn_hideSpinner()
	{
		spinner --;
		if(spinner <= 0)
		{
			$j('#spinner').hide();
			spinner = +0;
		}
	}
	function HtmlDecode(s)
	{
		return $j('<div>').html(s).text();
	}
	function fn_refreshTotal($gridDiv,pageData)
	{
		var totalRow = {isTotal:true, pq_rowcls:'total'};
		var totalColumns = [];
		$j.each($gridDiv.pqGrid('getColModel'), function(i,col)
		{
			if(col.gTotal)
			{
				totalRow[col.dataIndx] = +0;
				totalColumns.push(col.dataIndx);
			}
			else
			{
				totalRow[col.dataIndx] = null;
			}
		});

		//aggregate the totals
		$j.each(pageData, function(i,row)
		{
			$j.each(totalColumns, function(j,dataIndx)
			{
				if(!isNaN(row[dataIndx]))
					totalRow[dataIndx] += parseFloat(row[dataIndx]);
			});
		});

		if($gridDiv.find('.pq-grid-summary').length == 0)
			$j("<div class='pq-grid-summary'></div>").prependTo($gridDiv.find('.pq-grid-bottom'));
		$gridDiv.pqGrid("createTable", {data:[totalRow], $cont: $gridDiv.find('div.pq-grid-summary')});		
	}

	function fn_refreshGrid_callback($gridDiv, listObj)
	{
		/*
		any rows that are filtered out will not be removed from the grid when clearing dataModel.data
		so, to clear all data, we must first undo all filters.
		in order to ensure that the filter values can be restored, we clone the col model
		*/

		//reset all of the filter values, to expose all of the data
		$j.each($gridDiv.pqGrid('getColModel'), function(i,col)
		{
			if(col.gFilter)
			{	 
				 var selector = 'select[name=' + '\"' + col.dataIndx + '\"' + ']';

				 var select = $gridDiv.find(selector).get(0);
				 if(select && select.value != '')
				 {
				 	select.value = '';
				 	select.dispatchEvent(new Event('change'));
				 }

				 col.filter.cache = null;
				 col.filter.options=null;
			}
		});		

		//refresh the data
		var data = [];

		$j.each(listObj, function(i,obj)
		{
			data.push(obj.mapProperty);
		});
		$gridDiv.pqGrid('option','dataModel.data', data);

		//if there is new data, refresh the filter options, and refresh the data and view
		if(listObj.length > 0)
		{
			$j.each($gridDiv.pqGrid('option','colModel'), function(i,col)
			{
				if(col.gFilter == true)
				{
					//data that will be filtered needs to be clean
					$j.each($gridDiv.pqGrid('option','dataModel.data'), function(i,rowData)
					{
						rowData[col.dataIndx] = HtmlDecode(rowData[col.dataIndx]);
					});

					col.filter.value = '';
					col.filter.cache = null;
					col.filter.options = $gridDiv.pqGrid('getData',{dataIndx:[col.dataIndx]});
				}
			});
			//$gridDiv.pqGrid('option','colModel', colModel);
			$gridDiv.pqGrid('refreshDataAndView');
		}
		else //there's no data, so just refresh the view
		{
			$gridDiv.pqGrid('refreshView');
		}
		
		fn_hideSpinner();
		return;	
	}


	function fn_initFormat(colModel)
	{
		$j.each(colModel, function(i,col)
		{
			if(col.gFormat == 'number')
			{
				$j.extend(col,{
					align:'center',
					render: function(ui)
					{
						var cont = eval('ui.rowData.'+ui.dataIndx);
						if (cont != null && !isNaN(cont))
							return accounting.formatNumber(cont);
					}
				});
			}
			else if(col.gFormat == 'money')
			{
				$j.extend(col,{
					align:'right',
					halign:'right',
					render: function(ui)
					{
						var cont = eval('ui.rowData.'+ui.dataIndx);
						if (cont && cont != null && !isNaN(cont))
							return accounting.formatMoney(cont);
					}
				});
			}
			else if(col.gFormat == 'checkbox')
			{
				$j.extend(col,{
					align:'center',
					halign:'center',
					render: function(ui)
					{
						if(ui.rowData.pq_rowcls && ui.rowData.pq_rowcls.indexOf('total') >= 0) return;

						var cont = eval('ui.rowData.'+ui.dataIndx);
						var $wrap = $j('<wrap>').append($j('<input>').attr('type','checkbox').attr('disabled','disabled'));
						if(cont == 'true')
						{
							$wrap.children().first().attr('checked','checked');
							return $wrap.html();
						}
						else
						{
							return $wrap.html();
						}
					}
				});				
			}
		});
	}
	function fn_initFilter(colModel)
	{
		$j.each(colModel, function(i,col)
		{
			if(col.gFilter)
			{
				$j.extend(col,{
		        	filter:
		        	{
			        	type:'select',
			            condition: 'equal',
			            prepend: { '': '--All--' },
			            valueIndx: col.dataIndx,
			            labelIndx: col.dataIndx,
			            listeners: ['change'],
			            value:'',
			            cache:null,
			            options:null
		        	}
		    	});
			}
		});
	}


	function fn_initGrid_IncomeStatement()
	{
		var gridObj = {title:"Income Statement &nbsp&nbsp<a download='IncomeStatement.xls' href='#' onclick='return fn_export($j(\"#IncomeStatement\"),this);$j(\"#exportStage\").empty();'>Export XLS</a>",
						collapsible:{on:false,collapsed:false},
						columnTemplate: {minWidth:50, sortable:false},
						dragColumns:{enabled:true},
						editable:false,
						filterModel:{on:false, mode:'AND', header:false},
						freezeCols:3,
						freezeRows:0,
						height:400,
						historyModel:{on:false},
						hoverMode:'row',
						hwrap:false,
						numberCell:{show:true},
						pageModel: {type:null},
						pasteModel:{on:false},
						resizable: true,
						roundCorners: false,
						scrollModel: {pace:'fast', autoFit:false, horizontal:true},
						selectionModel: { type: null},
						showBottom:false,
						showHeader:true,
						showTitle:true,
						showTop:true,
						showToolbar:true,
						sortable:false,
						swipeModel:{on:false},
						virtualX: false,
						virtualXHeader: false,
						virtualY: false,
						width:'100%',
						wrap:false};

		//must add dummy columns, in order to set colModel.freezeCols > 0
		gridObj.colModel=[{dataIndx:'temp0'},{dataIndx:'temp`'},{dataIndx:'temp2'},{dataIndx:'temp3'}];

		var $gridDiv = $j('#IncomeStatement');
		$gridDiv.pqGrid(gridObj);

		$gridDiv.on('pqgridcellclick', function(event, ui){
			
			if(ui.rowData.pq_rowcls=='total') return;

			//get the column
			var col = $j(this).pqGrid('getColumn',{dataIndx:ui.dataIndx});
			if($j.inArray(col.gColType,['period','quarter'])== -1) return;

			var strURL = '/apex/gpTransactionDetail?idGL=' + ui.rowData.idGL;
				strURL += '&idPeriodFrom='+col.idPeriodFrom;
				strURL += '&idPeriodThru='+col.idPeriodThru;

			if(ui.column.mapProperty && ui.column.mapProperty.idPeriodFrom){
				strURL += '&idPeriodFrom='+ui.column.mapProperty.idPeriodFrom+'&idPeriodThru=' + ui.column.mapProperty.idPeriodThru;
			}
			window.open(strURL,'_blank');
		});

	}

	function fn_refreshGrid_IncomeStatement()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcIncomeStatement.retrieveIncomeStatement}',
			period.Id,
			function(result,event){
				if(event.status) fn_refreshGrid_IncomeStatement_callback(result);
				else {alert(event.message); fn_hideSpinner();}
			},
			{ buffer: true, escape: true, timeout: 120000 });	
	}

	function fn_showHideColumnsRefresh()
	{
		fn_showHideColumns();
		$j('#IncomeStatement').pqGrid('refreshView');
	}

	function fn_showHideColumns()
	{
		$j.each($j('#IncomeStatement').pqGrid('getColModel'), function(i,col)
		{
			if(col.gColType == 'period' || col.gColType == 'quarter')
			{
				if(col.gColType == $j('input[type="radio"][name="columnMode"]:checked').val())
				{
					col.hidden = false;
				}
				else
				{
					col.hidden = true;
				}
			}
		});
	}

	function fn_refreshGrid_IncomeStatement_callback(result)
	{
		//create a template of a total row
		var totalTemplate = {glName:'', glType:'', glSubType1:'', glSubType2:'', pq_rowcls:'total'};
		$j.each(result.colModel, function(i,col)
		{
			if(col.gColType == 'period' || col.gColType == 'quarter' || col.dataIndx == 'YTD')
			{
				totalTemplate[col.dataIndx] = +0;
				col['gFormat'] = 'money';
				col['gTotal'] = true;

				if(col.dataIndx == 'YTD')
					col['cls'] = 'total';
				else col['cls'] = 'drillThru';
				col.width=100;
			}
			else if(col.dataIndx == 'glType')
			{
				col.minWidth = 100;
			}

			else if(col.dataIndx == 'glName' || col.dataIndx == 'glType' || col.dataIndx == 'glSubType1' || col.dataIndx == 'glSubType2')
			{
				col.minWidth = 150;
				col.maxWidth = 400;
			}
			//console.log('col: '+JSON.stringify(col));
		});

		//console.log('totalTemplate: '+JSON.stringify(totalTemplate));
		$gridDiv = $j('#IncomeStatement');

		fn_initFormat(result.colModel);

		//set the colModel
		$gridDiv.pqGrid('option','colModel',result.colModel);


		var grossProfit = $j.extend({},totalTemplate);
			grossProfit.glType = 'Gross Profit';
		
		var netIncome = $j.extend({},totalTemplate);
			netIncome.glType = 'Net Income';
		
		var totalSubType1 	= $j.extend({},totalTemplate);
		var totalType 		= $j.extend({},totalTemplate);
		var total = {};

		var previousRow = {};
		var listRows = [];

		var firstRow = true;
		
		$j.each(result.data, function(i,row)
		{
			if(row.glType == 'Expense')
			{
				var negativeRow = $j.extend({},row);

				$j.each($gridDiv.pqGrid('getColModel'), function(i,col)
				{
					if(col.gTotal && !isNaN(row[col.dataIndx]))
					{
						negativeRow[col.dataIndx] = parseFloat(row[col.dataIndx]) * (-1);
					}					
				});
				if(row.glSubType1 == 'Operating Expense')
					fn_aggregateData(grossProfit, negativeRow);
				fn_aggregateData(netIncome, negativeRow);
			}
			else //revenue
			{
				fn_aggregateData(grossProfit, row);
				fn_aggregateData(netIncome, row);
			}

			//if SubType1 has changed...
			if(previousRow.glSubType1 !== row.glSubType1 && firstRow == false)
			{
				//take the totalSubType1 row that has been aggregating numerical data, and set the string data, based on the previous row
				total = $j.extend({},totalSubType1);
				total.glSubType1 = 'Total '+previousRow.glSubType1;
				total.glType = '';
				//total.glSubType2 = '';	
				total.glName = '';	
				//if the subType1 name is not blank, insert a row with the total
				if(previousRow.glSubType1)
					listRows.push(total);

				if(previousRow.glSubType1 == 'Operating Expense')
					listRows.push(grossProfit);

				//reset the total subtype1 row
				totalSubType1 = $j.extend({},totalTemplate);
				fn_aggregateData(totalSubType1, row);
			}
			else
			{
				//update the aggregation of sub type 1
				fn_aggregateData(totalSubType1, row);
			}

			//if type has changed
			if(previousRow.glType !== row.glType && firstRow == false)
			{
				total = $j.extend({},totalType);
				total.glType = 'Total '+previousRow.glType;
				total.glSubType1 = '';	
				total.glSubType2 = '';
				total.glName = '';	

				listRows.push(total);

				totalType = $j.extend({},totalTemplate);
				fn_aggregateData(totalType, row);
			}
			else
			{
				fn_aggregateData(totalType, row);
			}

			firstRow = false;
			previousRow = row;
			listRows.push(row);
		});

		//after the last row is processed, the loop has been terminated, so we must add the final rows
		total = $j.extend({},totalSubType1);
		total.glSubType1 = 'Total '+previousRow.glSubType1;
		total.glName = '';
		if(previousRow.glSubType1)
			listRows.push(total);

		total = $j.extend({},totalType);
		total.glType = 'Total '+previousRow.glType;
		total.glName = '';
		listRows.push(total);

		listRows.push(netIncome);

		//set the data model
		$gridDiv.pqGrid('option','dataModel', {data:listRows, sorting:'local', location:'local'});

		//show-hide columns
		fn_showHideColumns();

        $gridDiv.pqGrid('refreshDataAndView');

	    fn_hideSpinner();
	}

	function fn_aggregateData(totalRow, row)
	{
		var colModel = $j('#IncomeStatement').pqGrid('option','colModel');
		$j.each(colModel, function(i,col)
		{
			if(col.gTotal && !isNaN(row[col.dataIndx]))
			{
				totalRow[col.dataIndx] = parseFloat(totalRow[col.dataIndx]) + parseFloat(row[col.dataIndx]);
			}
		});
	}

	function fn_export($gridDiv,aTag)
	{
		fn_createExportTable($gridDiv);
		return ExcellentExport.excel(aTag, 'exportTable', 'IncomeStatement');
	}


	function fn_createExportTable($gridDiv)
	{
		fn_showSpinner();

		var grid = $gridDiv.pqGrid('getInstance').grid;
		var tableData = grid.option('dataModel').data; //console.log(tableData);
		var colModel = grid.getColModel();

		var $rowTemplate = $j('<tr></tr>');
		var $header = $j('<tr></tr>');

		//build-up the header row
		//build-up a template detail row
		$j.each(colModel, function(i,col)
		{
			var $newTD = $j('<td></td>');
			var $newTH = $j('<th style="border:1px solid black"></th>');
			if(!col.hidden && col.dataIndx != 'scrollSpacer')
			{
				$header.append($newTH.clone().addClass(col.dataIndx).html(col.title));
				$rowTemplate.append($newTD.clone().attr('id',col.dataIndx));
			}
		});

		//create the table
		$j('#exportStage').html('');
		$table = $j('<table></table>');
		$table.attr('id','exportTable');

		//add the header row
		$table.append('<tr><td colspan="10" style="font-size:larger; font-weight:bold;">Income Statement</td></tr>');
		$table.append($header);

		//create and add the detail rows
		$j.each(tableData, function(i, dataRow){
			var $newRow = $rowTemplate.clone();
			
			if(dataRow.hasOwnProperty('pq_rowcls') && dataRow.pq_rowcls=='total')
			{
				$newRow.css('font-weight','bold');
			}

			$j.each($newRow.find('td'),function (j, cell){
				idTd = $j(cell).attr('id');
				if(dataRow.hasOwnProperty(idTd))
				{
					var cont = dataRow[idTd];
					if(!isNaN(cont))
					{
						cont = accounting.formatNumber(cont);
					}
					if(dataRow.hasOwnProperty('pq_rowcls') && dataRow.pq_rowcls=='total' && $j.inArray(idTd,['MTD','Q1','Q2','Q3','Q4','YTD'])== -1 && cont==0){
						$j(cell).html('').addClass(idTd).removeAttr('id');
					} else {
						$j(cell).html(cont).addClass(idTd).removeAttr('id');
					}
				}
			});

			$table.append($newRow);
		});

		$j('#exportStage').append($table);

		fn_hideSpinner();
	}

</script>
</head>
	<div id="spinner" class="spinner" style="display:none;"></div>
	<div id="modal" class="modal" style="display:none;"></div>	
	
	<div style="margin:0 auto; width:90%;">
		<apex:form >
			<div style="text-align:center;">
				<br/>
				<span style="font-size:large">Income Statement <a id="periodName" class="link"></a></span>
				<br/><br/>
				<input type="button" value="<< prev period <<" 		onclick="fn_periodPrev();"/>
				<input type="button" value="Go to Current Period" 	onclick="fn_periodCurr();"/>
				<input type="button" value=">> next period >>" 		onclick="fn_periodNext();"/>
				<br/>
				<input type="radio" name="columnMode" value="period" onchange="fn_showHideColumnsRefresh();"/>by period
				&nbsp;&nbsp;&nbsp;
				<input type="radio" name="columnMode" value="quarter" onchange="fn_showHideColumnsRefresh();" checked="checked"/>by quarter

				<br/>
			</div>
		</apex:form>

		<table>
		<tr>
			<td>
				<div id="IncomeStatement"></div>
			</td>
		</tr>

		</table>
	</div>
<div id="exportStage" style="display:none;"></div>
</apex:page>