<apex:page controller="gcAllocationReview" showHeader="true" sidebar="true">

<head>
<style>
.spinner {
    background: rgba(0,0,0,.2);
    background-image: url('/img/loading32.gif');
    background-repeat: no-repeat;
    background-attachment: fixed;	    
    background-position: center;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 9998;
}
tr.hoverBlue:hover td{background:#00EEFF !important;}
tr.total td {font-weight: bold}
td.total{font-weight: bold}
.link{
	cursor:pointer;
	text-decoration:underline;
	color: blue;
}

tr.pq-grid-row:not(.total) td.pq-grid-cell.drillThru:hover
{
	cursor:pointer;
	text-decoration:underline;
	color: blue;
}
table{
	width:100%;
	border-collapse:collapse;
}
div.pq-grid-footer{
	display:none;
}
</style>

<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.js')}"/>
<apex:includeScript value="{!$Resource.dateJS}"/>
<script>
    //paramquery bug fix
    //$.paramquery.pqGrid.prototype.refreshHeader=function(){
        //this._createHeader();
    //};
</script>
<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">
    $j = jQuery.noConflict();

    var spinner = +0;
    var period = {};

    $j(document).ready(function()
    {
    	fn_initDatePicker();
    	fn_initGrid();
    	fn_refreshGrid();
    });


	accounting.settings = {
		currency: {
			symbol : "$",   // default currency symbol is '$'
			format: "%s%v", // controls output: %s = symbol, %v = value/number (can be object: see below)
			decimal : ".",  // decimal point separator
			thousand: ",",  // thousands separator
			precision : 0   // decimal places
		},
		number: {
			precision : 0,  // default precision on numbers is 0
			thousand: ",",
			decimal : "."
		}
	}

	function fn_initDatePicker()
	{
		/*
		$j('#datepickerFrom').datepicker({'showButtonPanel':true});
		$j('#datepickerFrom').val('{!MONTH(TODAY())}/1/{!YEAR(TODAY())}');
		$j('#datepickerFrom').change(function(){fn_refreshAll()});
		*/
		$j('#datepickerThru').datepicker({'showButtonPanel':true});
		$j('#datepickerThru').val('{!MONTH(TODAY())}/{!DAY(TODAY())}/{!YEAR(TODAY())}');
		$j('#datepickerThru').change(function(){fn_refreshAll()});
	}

	function fn_refreshAll()
	{
		fn_refreshGrid();
	}

	function fn_showSpinner()
	{
		spinner ++;
		if(spinner > 0)
		$j('#spinner').show();
	}
	function fn_hideSpinner()
	{
		spinner --;
		if(spinner <= 0)
		{
			$j('#spinner').hide();
			spinner = +0;
		}
	}
	function HtmlDecode(s)
	{
		return $j('<div>').html(s).text();
	}
	function fn_refreshTotal($gridDiv,pageData)
	{
		var totalRow = {isTotal:true, pq_rowcls:'total'};
		var totalColumns = [];
		$j.each($gridDiv.pqGrid('getColModel'), function(i,col)
		{
			if(col.gTotal)
			{
				totalRow[col.dataIndx] = +0;
				totalColumns.push(col.dataIndx);
			}
			else
			{
				totalRow[col.dataIndx] = null;
			}
		});

		//aggregate the totals
		$j.each(pageData, function(i,row)
		{
			$j.each(totalColumns, function(j,dataIndx)
			{
				if(!isNaN(row[dataIndx]))
					totalRow[dataIndx] += parseFloat(row[dataIndx]);
			});
		});

		if($gridDiv.find('.pq-grid-summary').length == 0)
			$j("<div class='pq-grid-summary'></div>").prependTo($gridDiv.find('.pq-grid-bottom'));
		$gridDiv.pqGrid("createTable", {data:[totalRow], $cont: $gridDiv.find('div.pq-grid-summary')});		
	}

	function fn_refreshGrid_callback($gridDiv, listObj)
	{
		/*
		any rows that are filtered out will not be removed from the grid when clearing dataModel.data
		so, to clear all data, we must first undo all filters.
		in order to ensure that the filter values can be restored, we clone the col model
		*/

		//reset all of the filter values, to expose all of the data
		$j.each($gridDiv.pqGrid('getColModel'), function(i,col)
		{
			if(col.gFilter)
			{	 
				 var selector = 'select[name=' + '\"' + col.dataIndx + '\"' + ']';

				 var select = $gridDiv.find(selector).get(0);
				 if(select && select.value != '')
				 {
				 	select.value = '';
				 	select.dispatchEvent(new Event('change'));
				 }

				 col.filter.cache = null;
				 col.filter.options=null;
			}
		});		

		//refresh the data
		var data = [];

		$j.each(listObj, function(i,obj)
		{
			data.push(obj.mapProperty);
		});
		$gridDiv.pqGrid('option','dataModel.data', data);

		//if there is new data, refresh the filter options, and refresh the data and view
		if(listObj.length > 0)
		{
			$j.each($gridDiv.pqGrid('option','colModel'), function(i,col)
			{
				if(col.gFilter == true)
				{
					//data that will be filtered needs to be clean
					$j.each($gridDiv.pqGrid('option','dataModel.data'), function(i,rowData)
					{
						rowData[col.dataIndx] = HtmlDecode(rowData[col.dataIndx]);
					});

					col.filter.value = '';
					col.filter.cache = null;
					col.filter.options = $gridDiv.pqGrid('getData',{dataIndx:[col.dataIndx]});
				}
			});
			$gridDiv.pqGrid('refreshDataAndView');
		}
		else //there's no data, so just refresh the view
		{
			$gridDiv.pqGrid('refreshView');
		}
		
		fn_hideSpinner();
		return;	
	}


	function fn_initFormat(colModel)
	{
		$j.each(colModel, function(i,col)
		{
			if(col.gFormat == 'number')
			{
				$j.extend(col,{
					align:'center',
					render: function(ui)
					{
						var cont = eval('ui.rowData.'+ui.dataIndx);
						if (cont != null && !isNaN(cont))
							return accounting.formatNumber(cont);
					}
				});
			}
			else if(col.gFormat == 'money')
			{
				$j.extend(col,{
					align:'right',
					halign:'right',
					render: function(ui)
					{
						var cont = eval('ui.rowData.'+ui.dataIndx);
						if (cont && cont != null && !isNaN(cont))
							return accounting.formatMoney(cont);
					}
				});
			}
			else if(col.gFormat == 'checkbox')
			{
				$j.extend(col,{
					align:'center',
					halign:'center',
					render: function(ui)
					{
						if(ui.rowData.pq_rowcls && ui.rowData.pq_rowcls.indexOf('total') >= 0) return;

						var cont = eval('ui.rowData.'+ui.dataIndx);
						var $wrap = $j('<wrap>').append($j('<input>').attr('type','checkbox').attr('disabled','disabled'));
						if(cont == 'true')
						{
							$wrap.children().first().attr('checked','checked');
							return $wrap.html();
						}
						else
						{
							return $wrap.html();
						}
					}
				});				
			}
		});
	}
	function fn_initFilter(colModel)
	{
		$j.each(colModel, function(i,col)
		{
			if(col.gFilter)
			{
				$j.extend(col,{
		        	filter:
		        	{
			        	type:'select',
			            condition: 'equal',
			            prepend: { '': '--All--' },
			            valueIndx: col.dataIndx,
			            labelIndx: col.dataIndx,
			            listeners: ['change'],
			            value:'',
			            cache:null,
			            options:null
		        	}
		    	});
			}
		});
	}

	function fn_initGrid()
	{
		var gridObj = {title:"Allocations and Order History&nbsp;&nbsp;<a download='export.xls' href='#' onclick='return fn_export($j(\"#grid\"),this);$j(\"#exportStage\").empty();'>Export XLS</a>&nbsp;",
						collapsible:{on:false,collapsed:false},
						columnTemplate: {width:100, sortable:true, dataType:"string", gDynamic:false},
						dataModel:{data:[], sorting:'local', location:'local'}, 
						dragColumns:{enabled:false},
						editable:false,
						filterModel:{on:true, mode:'AND', header:true},
						freezeCols:5,
						freezeRows:0,
						height:600,
						historyModel:{on:false},
						hoverMode:null,
						hwrap:false,
						numberCell:{show:true},
						pageModel: {type:null},
						pasteModel:{on:false},
						resizable: true,
						roundCorners: false,
						//scrollModel: {autoFit:true},
						selectionModel: {type:'row', mode:'range'},
						showBottom:true,
						showHeader:true,
						showTitle:true,
						showTop:true,
						showToolbar:true,
						sortable:true,
						swipeModel:{on:false},
						virtualX: false,
						//virtualXHeader: false,
						virtualY: false,
						width:'auto',
						wrap:false};

		gridObj.colModel=[{dataIndx:"vendorName", 	title:"Vendor", 						align:"left", 	gFilter:true},
						  {dataIndx:"customerName", title:"Customer", 						align:"left", 	gFilter:true, width:200},
						  {dataIndx:"productName",			title:"Product",				align:"left",   width:150},
						  {dataIndx:"productCode",			title:"NDC",					align:"left"},
						  {dataIndx:"qtyAllocated",			title:"Allocation",				align:"right", width:80}
						  ];

		fn_initFormat(gridObj.colModel);
		fn_initFilter(gridObj.colModel);

		$j.each(gridObj.colModel, function(i,col)
		{
			if(col.dataIndx == 'qtyAllocated')
			{
				$j.extend(col,{
					render: function(ui)
					{
						if(ui.rowData.isTotal) return;
						if(!ui.rowData.idOpportunityLine)
						{
							return '<button>create</button>';
						}
						var qty = '';
						if(parseFloat(ui.rowData.qtyAllocated) < 0 || parseFloat(ui.rowData.qtyAllocated) > 0)
							qty = accounting.formatNumber(ui.rowData.qtyAllocated);
						var amt = '';
						if(parseFloat(ui.rowData.amtAllocated) < 0 || parseFloat(ui.rowData.amtAllocated) > 0)
							amt = accounting.formatMoney(ui.rowData.amtAllocated);

						var strHTML = '<span class="link">'+qty+'</span>';
							strHTML += '<br/>';
							strHTML += '<span class="link">'+amt+'</span>';
						return strHTML;
					}
				});
			}
			if(col.dataIndx == 'vendorName')
			{
				$j.extend(col,{
					render: function(ui)
					{
						if(ui.rowData.isTotal) return;
						var strHTML = '<a href=\"/' + ui.rowData.idVendor + '\" target=\"_blank\">'+ui.rowData.vendorName+'</a>';
						return strHTML;
					}
				});
			}
			if(col.dataIndx == 'customerName')
			{
				$j.extend(col,{
					render: function(ui)
					{
						if(ui.rowData.isTotal) return;
						var strHTML = '<a href=\"/' + ui.rowData.idCustomer + '\" target=\"_blank\">'+ui.rowData.customerName+'</a>';
						return strHTML;
					}
				});
			}
			if(col.dataIndx == 'productName')
			{
				$j.extend(col,{
					filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] },
					render: function(ui)
					{
						if(ui.rowData.isTotal) return;
						var strHTML = '<a href=\"/' + ui.rowData.idProduct + '\" target=\"_blank\">'+ui.rowData.productName+'</a>';
						return strHTML;
					}
				});
			}
		});

		var $gridDiv = $j('#grid');

		$gridDiv.pqGrid(gridObj);


		$gridDiv.on('pqgridcellclick',function(event,ui)
		{
			if(ui.dataIndx == 'qtyAllocated'){/*proceed*/}
			else return;

			//rowData = ui.rowData;
			myUI = ui;

			var qty = ui.rowData.qtyAllocated;
			if(!qty || isNaN(qty) || qty == null) qty = +0;

			var unitPrice = 0;
			if(parseFloat(qty) < 0 || parseFloat(qty) > 0)
				unitPrice = (parseFloat(ui.rowData.amtAllocated)/parseFloat(qty)).toFixed(2);

			var strHTML = "<div id='popupAllocation' style='text-align:center'>";
				strHTML += "<button onclick='fn_updateOppyLine($j(\"#inputQty\").val(),$j(\"#inputUnitPrice\").val())'>save</button>&nbsp;";
				strHTML += "<button onclick='$j(this).parent().dialog(\"close\");'>cancel</button><br/><br/>";
				strHTML += "<table>";
				strHTML += 		"<tr>";
				strHTML +=			"<td style='text-align:right' width='40%'>Quantity:&nbsp</td>";
				strHTML +=			"<td style='text-align:left'  width='20%'><input id='inputQty' type='number' size='5' value='" +qty+"'/></td>";
				strHTML +=			"<td width='40%'>&nbsp</td>";
				strHTML += 		"<tr>";
			if(ui.rowData.idOpportunityLine)
			{
				strHTML += 		"<tr>";
				strHTML +=			"<td style='text-align:right'>Unit Price:&nbsp</td>";
				strHTML +=			"<td style='text-align:left'><input id='inputUnitPrice' type='number' size='5' value='" +unitPrice+"'/></td>";
				strHTML += 		"<tr>";
			}
				strHTML += "</table>";
				strHTML += "</div>";

	        $j(strHTML).dialog({
	        title: 'Edit Opportunity Line',
	        width: 300,
	        height: 200,
	        modal: true,
	        close: function(event, ui){$j(this).dialog("destroy")}
	        });
		});

		$gridDiv.on('pqgridrefresh', function(event, ui)
		{
	        fn_refreshTotal($j(this),ui.pageData);
		});	
	}

	var myUI;

	function fn_updateOppyLine(qtyNew, unitPriceNew)
	{
		fn_showSpinner();
		$j('#popupAllocation').dialog("close");
		var $gridDiv = $j('#grid');

		/*
			if a row does NOT have an idOpportunityLine, then an opportunity line will be created by the remote action
		*/
		var idOpportunityLine = null;
		if(myUI.rowData.idOpportunityLine) idOpportunityLine = myUI.rowData.idOpportunityLine;

		/*
			if there was no idOpportunityLine, then the Unit Price input field will have been suppressed from the UI, so its value will be undefined.
		*/

		if(!unitPriceNew) unitPriceNew = null;

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAllocationReview.updateOpportunityLine}',
			idOpportunityLine, myUI.rowData.idCustomer, myUI.rowData.idProduct, $j('#datepickerThru').val(), qtyNew, unitPriceNew,
			function(result,event)
			{
				if(event.status)
				{
					if(result.Id || result.Id == null)
					{
						myUI.rowData.qtyAllocated = result.Quantity;
						myUI.rowData.amtAllocated = result.TotalPrice;
						myUI.rowData.idOpportunityLine = result.Id;
						
						$gridDiv.pqGrid("refreshCell",{rowIndx:myUI.rowIndx, dataIndx:myUI.dataIndx});
					}
					else
					{
						alert('Create an Opportunity for this Customer and/or create a Pricebook Entry for this Product.');
					}
					fn_hideSpinner();			
				}
				else 
				{
					alert(event.message); fn_hideSpinner();
				}
			},
			{buffer:true, escape:true, timeout:120000});			
	}

	function fn_adjustColumns()
	{
		var colsDesired = parseInt($j('#monthCount option:selected').val());

		var colModel = $j('#grid').pqGrid('getColModel');
		var colModelNew = [];

		$j.each(colModel, function(i,col)
		{
			if(col.gDynamic == false) colModelNew.push(col);
		});

		for(i = +0; i<=colsDesired; i++)
		{
			var colNew = {};
			colNew.dataIndx = 'MONTH';
			if(i<10) colNew.dataIndx += String(0);
			colNew.dataIndx += String(i);
			colNew.title= colNew.dataIndx;
			colNew.align='right';
			colNew.width=80;
			colNew.sortable=false;
			colNew.gDynamic=true;

			var myDate = Date.parse($j('#datepickerThru').val()).moveToFirstDayOfMonth().addMonths((-1)*i);
			colNew.title=myDate.toString('MMM-yy');

			$j.extend(colNew,{
				render: function(ui)
				{
					if(ui.rowData.isTotal) return;
					var dataIndxQty = 'ui.rowData.qty'+ui.dataIndx;
					var dataIndxAmt = 'ui.rowData.amt'+ui.dataIndx;
					var qty = '';
					    if(parseFloat(eval(dataIndxQty)) < 0 || parseFloat(eval(dataIndxQty)) > 0)
					    qty = accounting.formatNumber(eval(dataIndxQty));
					var amt = '';
						if(parseFloat(eval(dataIndxAmt)) < 0 || parseFloat(eval(dataIndxAmt)) > 0)
						amt = accounting.formatMoney(eval(dataIndxAmt));

					var strHTML = '<span>'+qty+'</span>';
						strHTML += '<br/>';
						strHTML += '<span>'+amt+'</span>';
					return strHTML;
				}
			});
			colModelNew.push(colNew);
		}
		colModelNew.push({dataIndx:"scrollSpacer", title:"", minWidth:15, maxWidth:15});

		$j('#grid').pqGrid( "option", "colModel",colModelNew);

	
		//console.log('colModel: '+JSON.stringify($j('#grid').pqGrid( "option", "colModel")));		
	}

	function fn_refreshGrid()
	{
		fn_showSpinner();
		fn_adjustColumns();

		var $gridDiv = $j('#grid');

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAllocationReview.retrieveAllocation}',
			$j('#datepickerThru').val(),$j('#monthCount option:selected').val(),[],[],[],
			function(result,event){if(event.status) fn_refreshGrid_callback($gridDiv,result);else {alert(event.message); fn_hideSpinner();}},
			{buffer:true, escape:true, timeout:120000});	
	}


	function fn_export($gridDiv,aTag)
	{
		fn_createExportTable($gridDiv);
		return ExcellentExport.excel(aTag, 'exportTable', 'AllocationsAndOrders');
	}


	function fn_createExportTable($gridDiv)
	{
		fn_showSpinner();

		var grid = $gridDiv.pqGrid('getInstance').grid;
		var tableData = grid.option('dataModel').data; //console.log(tableData);
		var colModel = grid.getColModel();

		var $rowTemplate = $j('<tr></tr>');
		var $header = $j('<tr></tr>');

		//build-up the header row
		//build-up a template detail row
		$j.each(colModel, function(i,col)
		{
			var $newTD = $j('<td></td>');
			var $newTH = $j('<th style="border:1px solid black"></th>');
			if(!col.hidden && col.dataIndx != 'scrollSpacer')
			{
				if(col.dataIndx.substring(0,5) == 'MONTH') col.dataIndx = 'qty'+col.dataIndx;
				$header.append($newTH.clone().addClass(col.dataIndx).html(col.title));
				$rowTemplate.append($newTD.clone().attr('id',col.dataIndx));
			}
		});

		//create the table
		$j('#exportStage').html('');
		$table = $j('<table></table>');
		$table.attr('id','exportTable');

		//add the header row
		$table.append('<tr><td colspan="4" style="font-size:larger; font-weight:bold;">Allocations and Orders</td></tr>');
		$table.append($header);

		//create and add the detail rows
		$j.each(tableData, function(i, dataRow){
			var $newRow = $rowTemplate.clone();
			
			if(dataRow.hasOwnProperty('pq_rowcls') && dataRow.pq_rowcls=='total')
			{
				$newRow.css('font-weight','bold');
			}

			$j.each($newRow.find('td'),function (j, cell){
				idTd = $j(cell).attr('id');
				if(dataRow.hasOwnProperty(idTd))
				{
					var cont = dataRow[idTd];
					if(!isNaN(cont))
					{
						cont = accounting.formatNumber(cont);
					}
					if(dataRow.hasOwnProperty('pq_rowcls') && dataRow.pq_rowcls=='total' && $j.inArray(idTd,['MTD','Q1','Q2','Q3','Q4','YTD'])== -1 && cont==0){
						$j(cell).html('').addClass(idTd).removeAttr('id');
					} else {
						$j(cell).html(cont).addClass(idTd).removeAttr('id');
					}
				}
			});

			$table.append($newRow);
		});

		$j('#exportStage').append($table);

		fn_hideSpinner();
	}

</script>
</head>
	<div id="spinner" class="spinner" style="display:none;"></div>
	<div id="modal" class="modal" style="display:none;"></div>	
	
	<div style="margin:0 auto; width:95%;">

		<table>
			<tr>
				<td style="text-align:left;" width="50%">
				&nbsp;
				</td>			
				<td style="text-align:left;">
					Display Orders Filled Thru:&nbsp;&nbsp;<input type="text" id="datepickerThru" size="12"/>&nbsp;&nbsp;
					<br/>
					Months of Order History to Display:&nbsp;&nbsp;
					<select id="monthCount" onchange="fn_refreshAll();">
						<option value="6">6</option>
						<option value="12">12</option>
						<option value="18">18</option>	
					</select>
				</td>

			</tr>
			<tr>

			</tr>
			<tr>
				<td colspan="2">
				<br/>
					<div id="grid"></div>
					<br/>
					<div id=""></div>
				</td>
			</tr>

		</table>
	</div>
<div id="exportStage" style="display:none;"></div>
</apex:page>