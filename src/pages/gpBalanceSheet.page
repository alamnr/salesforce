<apex:page controller="gcAccountingPeriod" extensions="gcBalanceSheet" showHeader="true" sidebar="true">

<head>
<style>
.spinner {
    background: rgba(0,0,0,.2);
    background-image: url('/img/loading32.gif');
    background-repeat: no-repeat;
    background-attachment: fixed;	    
    background-position: center;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 9998;
}
.modal {
    background: rgba(0,0,0,.2);
    background-repeat: no-repeat;
    background-attachment: fixed;	    
    background-position: center;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 100;
}
tr.hoverBlue:hover td{background:#00EEFF !important;}
tr.total td {font-weight: bold}
.link{
	cursor:pointer;
	text-decoration:underline;
}
table{
	width:100%;
	border-collapse:collapse;
}
tr.pq-grid-row:not(.total) td.pq-grid-cell.drillThru:hover
{
	cursor:pointer;
	text-decoration:underline;
	color: blue;
}
</style>

<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro,'/pqgrid.min.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro,'/pqgrid.min.js')}"/>

<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">
    $j = jQuery.noConflict();

    var spinner = +0;
    var period = {};
    var periodYearStart = {};

    $j(document).ready(function()
    {
    	fn_initGrid_BalanceSheet();

    	period.Id = '{!$CurrentPage.parameters.idPeriod}';
    	if(period.Id)
    		fn_periodThis(period.Id);
    	else
    		fn_periodCurr();
    });


	accounting.settings = {
		currency: {
			symbol : "$",   // default currency symbol is '$'
			format: "%s%v", // controls output: %s = symbol, %v = value/number (can be object: see below)
			decimal : ".",  // decimal point separator
			thousand: ",",  // thousands separator
			precision : 2   // decimal places
		},
		number: {
			precision : 2,  // default precision on numbers is 0
			thousand: ",",
			decimal : "."
		}
	}
	function fn_periodPrev()
	{
		fn_showSpinner();
		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodPrev}',
			period.Id,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodNext()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodNext}',
			period.Id,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodCurr()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodCurr}',
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_periodThis(idPeriod)
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodThis}',
			idPeriod,
			function(result,event){if(event.status) {period=result; fn_refreshAll(); fn_hideSpinner();} else {alert(event.message); fn_hideSpinner();}});			
	}
	function fn_refreshAll()
	{
		$j('#periodName').html(period.Name).attr('href','/'+period.Id);

		fn_refreshGrid_BalanceSheet();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcAccountingPeriod.periodYearStart}',
			period.Id,
			function(result,event){if(event.status) {periodYearStart=result;} else {alert(event.message);}});		
	}
	function fn_showSpinner()
	{
		spinner ++;
		if(spinner > 0)
		$j('#spinner').show();
	}
	function fn_hideSpinner()
	{
		spinner --;
		if(spinner <= 0)
		{
			$j('#spinner').hide();
			spinner = +0;
		}
	}


	function fn_initGrid_BalanceSheet()
	{
		var gridObj = {title:"BalanceSheet &nbsp&nbsp<a download='export.xls' href='#' onclick='return fn_export($j(\"#BalanceSheet\"),this);$j(\"#exportStage\").empty();'>Export XLS</a>",
						collapsible:{on:false,collapsed:false},
						columnTemplate: {minWidth:50, sortable:false},
						dragColumns:{enabled:false},
						editable:false,
						filterModel:{on:false, mode:'AND', header:false},
						freezeCols:0,
						freezeRows:0,
						height:600,
						historyModel:{on:false},
						hoverMode:'row',
						hwrap:false,
						numberCell:{show:false},
						pageModel: {type:null},
						pasteModel:{on:false},
						resizable: true,
						roundCorners: false,
						scrollModel: {pace:'fast', autoFit:false, horizontal:true},
						selectionModel: { type: null},
						showBottom:true,
						showHeader:true,
						showTitle:true,
						showTop:true,
						showToolbar:true,
						sortable:false,
						swipeModel:{on:false},
						virtualX: false,
						virtualXHeader: false,
						virtualY: false,
						width:'100%',
						wrap:false};

		gridObj.colModel=[{dataIndx:'temp0'}];

		$j('#BalanceSheet').pqGrid(gridObj);

		//update the variance details whenever a cell is clicked

		$j('#BalanceSheet').on('pqgridrowclick', function(event, ui){
			
			if(ui.rowData.pq_rowcls=='total') return;

			var strURL = '/apex/gpTransactionDetail?idPeriodFrom='+periodYearStart.Id+'&idPeriodThru=' + period.Id + '&idGL=' + ui.rowData.idGL;
			window.open(strURL,'_blank');
		});

	}

	function fn_refreshGrid_BalanceSheet()
	{
		fn_showSpinner();

		Visualforce.remoting.Manager.invokeAction(
			'{!$RemoteAction.gcBalanceSheet.retrieveBalanceSheet}',
			period.Id,
			function(result,event){if(event.status) fn_refreshGrid_BalanceSheet_callback(result);else {alert(event.message); fn_hideSpinner();}},
			{ buffer: true, escape: true, timeout: 120000 });	
	}

	function fn_refreshGrid_BalanceSheet_callback(grid)
	{
		//create a template of a total row
		var totalTemplate = {glName:'', glSubType1:'', glSubType2:'', yearOpen:parseFloat(0), thisYear:parseFloat(0), periodClose:parseFloat(0), pq_rowcls:'total'};

		var totalCredit = $j.extend({},totalTemplate);
			totalCredit.glName = '';
			totalCredit.glSubType1 = 'Total Liabilities + Equity';
		var totalSubType1 = $j.extend({},totalTemplate);
		var totalSubType2 = $j.extend({},totalTemplate);
		var total = {};

		var previousRow = {};
		var listRows = [];

		var firstRow = true;

		$j.each(grid.data, function(i,row)
		{
			if(previousRow.glSubType2 != row.glSubType2 && firstRow == false)
			{
				total = $j.extend({},totalSubType2);
				total.glSubType1 = '';
				total.glSubType2 = 'Total '+previousRow.glSubType2;
				if(previousRow.glSubType1 == 'Assets')
					total.isAsset = true;
				total.glName = '';	
				totalSubType2 = $j.extend({},totalTemplate);
				if(previousRow.glSubType2)
					listRows.push(total);

				fn_aggregateData(totalSubType2, row);
			}
			else
			{
				fn_aggregateData(totalSubType2, row);
			}

			if(previousRow.glSubType1 != row.glSubType1 && firstRow == false)
			{
				total = $j.extend({},totalSubType1);
				total.glSubType1 = 'Total '+previousRow.glSubType1;
				if(previousRow.glSubType1 == 'Assets')
					total.isAsset = true;
				total.glSubType2 = '';	
				total.glName = '';	
				totalSubType1 = $j.extend({},totalTemplate);
				if(previousRow.glSubType1)
					listRows.push(total);
				fn_aggregateData(totalSubType1, row);
			}
			else
			{
				fn_aggregateData(totalSubType1, row);
			}	

			if(row.glSubType1 != 'Assets')
			{
				fn_aggregateData(totalCredit, row);
			}			
			firstRow = false;
			previousRow = row;
			listRows.push(row);
		});

		total = $j.extend({},totalSubType2);
		total.glSubType1 = '';
		total.glSubType2 = 'Total '+previousRow.glSubType2;
		if(previousRow.glSubType1 == 'Assets')
			total.isAsset = true;
		total.glName = '';	
		totalSubType2 = $j.extend({},totalTemplate);
		listRows.push(total);

		total = $j.extend({},totalSubType1);
		total.glSubType1 = 'Total '+previousRow.glSubType1;
		if(previousRow.glSubType1 == 'Assets')
			total.isAsset = true;
		total.glSubType2 = '';	
		total.glName = '';	
		totalSubType2 = $j.extend({},totalTemplate);
		listRows.push(total);

		listRows.push(totalCredit);

		//set the colModel
		$j('#BalanceSheet').pqGrid('option','colModel',fn_refreshGrid_BalanceSheet_ColModel(grid.colModel));
		//set the data model
		$j('#BalanceSheet').pqGrid('option','dataModel', {data:listRows, sorting:'local', location:'local'});

        $j('#BalanceSheet').pqGrid('refreshDataAndView');

	    fn_hideSpinner();
	}

	function fn_refreshGrid_BalanceSheet_ColModel(colModel)
	{

		$j.each(colModel, function(i,col)
		{
			col.enableClick = false;

			if(col.dataIndx == 'glName' || col.dataIndx == 'glSubType1' || col.dataIndx == 'glSubType2')
			{
				col.minWidth = 150;
				col.maxWidth = 400;
			}		
			else
			{
				col.width = 100;
				col.dataType='float';
				col.align='right';
				col.enableClick = true;

				$j.extend(col,{
					render: function(ui)
					{
						var cont = eval('ui.rowData.'+ui.dataIndx);
						if (cont == null) return null;
						if(ui.rowData.pq_rowcls=='total' && !ui.rowData.isAsset) cont *= -1;
						else if (ui.rowData.glSubType1 == 'Liabilities' || ui.rowData.glSubType1 == 'Equity') cont *= -1;
						return accounting.formatNumber(cont);
					}
				});

				if(col.dataIndx == 'thisYear')
				{
					col.enableClick = true;
					col['cls'] = 'drillThru';
				}
			}

		});

		return colModel;
	}

	function fn_aggregateData(totolObj, record){
		totolObj.yearOpen += parseFloat(record.yearOpen);
		totolObj.thisYear += parseFloat(record.thisYear);
		totolObj.periodClose += parseFloat(record.periodClose);
	}


	function fn_export($gridDiv,aTag)
	{
		fn_createExportTable($gridDiv);
		return ExcellentExport.excel(aTag, 'exportTable', 'exportWorkSheet');
	}


	function fn_createExportTable($gridDiv)
	{
		fn_showSpinner();

		var grid = $gridDiv.pqGrid('getInstance').grid;
		var tableData = grid.option('dataModel').data;
		var colModel = grid.getColModel();

		var $rowTemplate = $j('<tr></tr>');
		var $header = $j('<tr></tr>');

		//build-up the header row
		//build-up a template detail row
		$j.each(colModel, function(i,col)
		{
			var $newTD = $j('<td></td>');
			var $newTH = $j('<th style="border:1px solid black"></th>');
			if(!col.hidden && col.dataIndx != 'scrollSpacer')
			{
				$header.append($newTH.clone().addClass(col.dataIndx).html(col.title));
				$rowTemplate.append($newTD.clone().attr('id',col.dataIndx));
			}
		});

		//create the table
		$j('#exportStage').html('');
		$table = $j('<table></table>');
		$table.attr('id','exportTable');

		//add the header row
		$table.append('<tr><td colspan="4" style="font-size:larger; font-weight:bold;">Balance Sheet</td></tr>');
		$table.append($header);

		//create and add the detail rows
		$j.each(tableData, function(i, dataRow){
			var $newRow = $rowTemplate.clone();
			if(dataRow.pq_rowcls && dataRow.pq_rowcls == 'total')
			{
				$newRow.css('font-weight','bold');
			}

			$j.each($newRow.find('td'),function (j, cell){
				idTd = $j(cell).attr('id');
				if(dataRow.hasOwnProperty(idTd))
				{
					var cont = dataRow[idTd];
					if(!isNaN(cont))
					{
						//if(dataRow.glType == 'Revenue') cont *= (-1);
						if(dataRow.pq_rowcls=='total' && !dataRow.isAsset) cont *= -1;
						else if (dataRow.glSubType1 == 'Liabilities' || dataRow.glSubType1 == 'Equity') cont *= -1;
						cont = accounting.formatNumber(cont);
					} 
					if(dataRow.hasOwnProperty('pq_rowcls') && dataRow.pq_rowcls=='total' && $j.inArray(idTd,['yearOpen','thisYear','periodClose'])== -1 && cont==0){
						$j(cell).html('').addClass(idTd).removeAttr('id');
					} else {
						$j(cell).html(cont).addClass(idTd).removeAttr('id');
					}
				}
			});

			$table.append($newRow);
		});

		$j('#exportStage').append($table);

		fn_hideSpinner();
	}
</script>
</head>
	<div id="spinner" class="spinner" style="display:none;"></div>
	<div id="modal" class="modal" style="display:none;"></div>	
	
	<div style="margin:0 auto; width:90%;">
		<apex:form >
			<div style="text-align:center;">
				<br/>
				<span style="font-size:large">Balance Sheet as of <a id="periodName" class="link"></a> Period End</span>
				<br/><br/>
				<input type="button" value="<< prev period <<" 		onclick="fn_periodPrev();"/>
				<input type="button" value="Go to Current Period" 	onclick="fn_periodCurr();"/>
				<input type="button" value=">> next period >>" 		onclick="fn_periodNext();"/>
				<br/>
				<br/>
			</div>
		</apex:form>

		<table>
		<tr>
			<td>
				<div id="BalanceSheet"></div>
			</td>
		</tr>

		</table>
	</div>
<div id="exportStage" style="display:none;"></div>
</apex:page>